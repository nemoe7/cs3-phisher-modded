/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.jiktan.models

import com.jiktan.models.Daterange
import com.jiktan.models.MalUrl
import com.jiktan.models.MangaImages
import com.jiktan.models.Title

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * Manga Resource
 *
 * @param malId MyAnimeList ID
 * @param url MyAnimeList URL
 * @param images
 * @param approved Whether the entry is pending approval on MAL or not
 * @param titles All Titles
 * @param title Title
 * @param titleEnglish English Title
 * @param titleJapanese Japanese Title
 * @param type Manga Type
 * @param chapters Chapter count
 * @param volumes Volume count
 * @param status Publishing status
 * @param publishing Publishing boolean
 * @param published
 * @param score Score
 * @param scoredBy Number of users
 * @param rank Ranking
 * @param popularity Popularity
 * @param members Number of users who have added this entry to their list
 * @param favorites Number of users who have favorited this entry
 * @param synopsis Synopsis
 * @param background Background
 * @param authors
 * @param serializations
 * @param genres
 * @param explicitGenres
 * @param themes
 * @param demographics
 */


data class Manga (

    /* MyAnimeList ID */
    @get:JsonProperty("mal_id")
    val malId: kotlin.Int? = null,

    /* MyAnimeList URL */
    @get:JsonProperty("url")
    val url: kotlin.String? = null,

    @get:JsonProperty("images")
    val images: MangaImages? = null,

    /* Whether the entry is pending approval on MAL or not */
    @get:JsonProperty("approved")
    val approved: kotlin.Boolean? = null,

    /* All Titles */
    @get:JsonProperty("titles")
    val titles: kotlin.collections.List<Title>? = null,

    /* Title */
    @get:JsonProperty("title")
    @Deprecated(message = "This property is deprecated.")
    val title: kotlin.String? = null,

    /* English Title */
    @get:JsonProperty("title_english")
    @Deprecated(message = "This property is deprecated.")
    val titleEnglish: kotlin.String? = null,

    /* Japanese Title */
    @get:JsonProperty("title_japanese")
    @Deprecated(message = "This property is deprecated.")
    val titleJapanese: kotlin.String? = null,

    /* Manga Type */
    @get:JsonProperty("type")
    val type: Manga.Type? = null,

    /* Chapter count */
    @get:JsonProperty("chapters")
    val chapters: kotlin.Int? = null,

    /* Volume count */
    @get:JsonProperty("volumes")
    val volumes: kotlin.Int? = null,

    /* Publishing status */
    @get:JsonProperty("status")
    val status: Manga.Status? = null,

    /* Publishing boolean */
    @get:JsonProperty("publishing")
    val publishing: kotlin.Boolean? = null,

    @get:JsonProperty("published")
    val published: Daterange? = null,

    /* Score */
    @get:JsonProperty("score")
    val score: kotlin.Float? = null,

    /* Number of users */
    @get:JsonProperty("scored_by")
    val scoredBy: kotlin.Int? = null,

    /* Ranking */
    @get:JsonProperty("rank")
    val rank: kotlin.Int? = null,

    /* Popularity */
    @get:JsonProperty("popularity")
    val popularity: kotlin.Int? = null,

    /* Number of users who have added this entry to their list */
    @get:JsonProperty("members")
    val members: kotlin.Int? = null,

    /* Number of users who have favorited this entry */
    @get:JsonProperty("favorites")
    val favorites: kotlin.Int? = null,

    /* Synopsis */
    @get:JsonProperty("synopsis")
    val synopsis: kotlin.String? = null,

    /* Background */
    @get:JsonProperty("background")
    val background: kotlin.String? = null,

    @get:JsonProperty("authors")
    val authors: kotlin.collections.List<MalUrl>? = null,

    @get:JsonProperty("serializations")
    val serializations: kotlin.collections.List<MalUrl>? = null,

    @get:JsonProperty("genres")
    val genres: kotlin.collections.List<MalUrl>? = null,

    @get:JsonProperty("explicit_genres")
    val explicitGenres: kotlin.collections.List<MalUrl>? = null,

    @get:JsonProperty("themes")
    val themes: kotlin.collections.List<MalUrl>? = null,

    @get:JsonProperty("demographics")
    val demographics: kotlin.collections.List<MalUrl>? = null

) {

    /**
     * Manga Type
     *
     * Values: MANGA,NOVEL,LIGHT_NOVEL,ONE_MINUS_SHOT,DOUJINSHI,MANHUA,MANHWA,OEL
     */
    enum class Type(val value: kotlin.String) {
        @JsonProperty(value = "Manga") MANGA("Manga"),
        @JsonProperty(value = "Novel") NOVEL("Novel"),
        @JsonProperty(value = "Light Novel") LIGHT_NOVEL("Light Novel"),
        @JsonProperty(value = "One-shot") ONE_MINUS_SHOT("One-shot"),
        @JsonProperty(value = "Doujinshi") DOUJINSHI("Doujinshi"),
        @JsonProperty(value = "Manhua") MANHUA("Manhua"),
        @JsonProperty(value = "Manhwa") MANHWA("Manhwa"),
        @JsonProperty(value = "OEL") OEL("OEL");
    }
    /**
     * Publishing status
     *
     * Values: FINISHED,PUBLISHING,ON_HIATUS,DISCONTINUED,NOT_YET_PUBLISHED
     */
    enum class Status(val value: kotlin.String) {
        @JsonProperty(value = "Finished") FINISHED("Finished"),
        @JsonProperty(value = "Publishing") PUBLISHING("Publishing"),
        @JsonProperty(value = "On Hiatus") ON_HIATUS("On Hiatus"),
        @JsonProperty(value = "Discontinued") DISCONTINUED("Discontinued"),
        @JsonProperty(value = "Not yet published") NOT_YET_PUBLISHED("Not yet published");
    }

}
