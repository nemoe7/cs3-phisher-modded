/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.jiktan.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.jiktan.models.AnimeSearch
import com.jiktan.models.AnimeSearchQueryRating
import com.jiktan.models.AnimeSearchQueryType
import com.jiktan.models.CharactersSearch
import com.jiktan.models.GetTopReviews200Response
import com.jiktan.models.MangaSearch
import com.jiktan.models.MangaSearchQueryType
import com.jiktan.models.PeopleSearch
import com.jiktan.models.TopAnimeFilter
import com.jiktan.models.TopMangaFilter
import com.jiktan.models.TopReviewsTypeEnum

import com.fasterxml.jackson.annotation.JsonProperty

import com.jiktan.infrastructure.ApiClient
import com.jiktan.infrastructure.ApiResponse
import com.jiktan.infrastructure.ClientException
import com.jiktan.infrastructure.ClientError
import com.jiktan.infrastructure.ServerException
import com.jiktan.infrastructure.ServerError
import com.jiktan.infrastructure.MultiValueMap
import com.jiktan.infrastructure.PartConfig
import com.jiktan.infrastructure.RequestConfig
import com.jiktan.infrastructure.RequestMethod
import com.jiktan.infrastructure.ResponseType
import com.jiktan.infrastructure.Success
import com.jiktan.infrastructure.toMultiValue

class TopApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.jikan.moe/v4")
        }
    }

    /**
     * GET /top/anime
     *
     *
     * @param type  (optional)
     * @param filter  (optional)
     * @param rating  (optional)
     * @param sfw Filter out Adult entries (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return AnimeSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTopAnime(type: AnimeSearchQueryType? = null, filter: TopAnimeFilter? = null, rating: AnimeSearchQueryRating? = null, sfw: kotlin.Boolean? = null, page: kotlin.Int? = null, limit: kotlin.Int? = null) : AnimeSearch {
        val localVarResponse = getTopAnimeWithHttpInfo(type = type, filter = filter, rating = rating, sfw = sfw, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AnimeSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /top/anime
     *
     *
     * @param type  (optional)
     * @param filter  (optional)
     * @param rating  (optional)
     * @param sfw Filter out Adult entries (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<AnimeSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getTopAnimeWithHttpInfo(type: AnimeSearchQueryType?, filter: TopAnimeFilter?, rating: AnimeSearchQueryRating?, sfw: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<AnimeSearch?> {
        val localVariableConfig = getTopAnimeRequestConfig(type = type, filter = filter, rating = rating, sfw = sfw, page = page, limit = limit)

        return request<Unit, AnimeSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTopAnime
     *
     * @param type  (optional)
     * @param filter  (optional)
     * @param rating  (optional)
     * @param sfw Filter out Adult entries (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getTopAnimeRequestConfig(type: AnimeSearchQueryType?, filter: TopAnimeFilter?, rating: AnimeSearchQueryRating?, sfw: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (rating != null) {
                    put("rating", listOf(rating.toString()))
                }
                if (sfw != null) {
                    put("sfw", listOf(sfw.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/top/anime",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /top/characters
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @return CharactersSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTopCharacters(page: kotlin.Int? = null, limit: kotlin.Int? = null) : CharactersSearch {
        val localVarResponse = getTopCharactersWithHttpInfo(page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharactersSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /top/characters
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<CharactersSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getTopCharactersWithHttpInfo(page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<CharactersSearch?> {
        val localVariableConfig = getTopCharactersRequestConfig(page = page, limit = limit)

        return request<Unit, CharactersSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTopCharacters
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getTopCharactersRequestConfig(page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/top/characters",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /top/manga
     *
     *
     * @param type  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return MangaSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTopManga(type: MangaSearchQueryType? = null, filter: TopMangaFilter? = null, page: kotlin.Int? = null, limit: kotlin.Int? = null) : MangaSearch {
        val localVarResponse = getTopMangaWithHttpInfo(type = type, filter = filter, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MangaSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /top/manga
     *
     *
     * @param type  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<MangaSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getTopMangaWithHttpInfo(type: MangaSearchQueryType?, filter: TopMangaFilter?, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<MangaSearch?> {
        val localVariableConfig = getTopMangaRequestConfig(type = type, filter = filter, page = page, limit = limit)

        return request<Unit, MangaSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTopManga
     *
     * @param type  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getTopMangaRequestConfig(type: MangaSearchQueryType?, filter: TopMangaFilter?, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/top/manga",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /top/people
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @return PeopleSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTopPeople(page: kotlin.Int? = null, limit: kotlin.Int? = null) : PeopleSearch {
        val localVarResponse = getTopPeopleWithHttpInfo(page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PeopleSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /top/people
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<PeopleSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getTopPeopleWithHttpInfo(page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<PeopleSearch?> {
        val localVariableConfig = getTopPeopleRequestConfig(page = page, limit = limit)

        return request<Unit, PeopleSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTopPeople
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getTopPeopleRequestConfig(page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/top/people",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /top/reviews
     *
     *
     * @param page  (optional)
     * @param type  (optional)
     * @param preliminary Whether the results include preliminary reviews or not. Defaults to true. (optional)
     * @param spoilers Whether the results include reviews with spoilers or not. Defaults to true. (optional)
     * @return GetTopReviews200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTopReviews(page: kotlin.Int? = null, type: TopReviewsTypeEnum? = null, preliminary: kotlin.Boolean? = null, spoilers: kotlin.Boolean? = null) : GetTopReviews200Response {
        val localVarResponse = getTopReviewsWithHttpInfo(page = page, type = type, preliminary = preliminary, spoilers = spoilers)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTopReviews200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /top/reviews
     *
     *
     * @param page  (optional)
     * @param type  (optional)
     * @param preliminary Whether the results include preliminary reviews or not. Defaults to true. (optional)
     * @param spoilers Whether the results include reviews with spoilers or not. Defaults to true. (optional)
     * @return ApiResponse<GetTopReviews200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getTopReviewsWithHttpInfo(page: kotlin.Int?, type: TopReviewsTypeEnum?, preliminary: kotlin.Boolean?, spoilers: kotlin.Boolean?) : ApiResponse<GetTopReviews200Response?> {
        val localVariableConfig = getTopReviewsRequestConfig(page = page, type = type, preliminary = preliminary, spoilers = spoilers)

        return request<Unit, GetTopReviews200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTopReviews
     *
     * @param page  (optional)
     * @param type  (optional)
     * @param preliminary Whether the results include preliminary reviews or not. Defaults to true. (optional)
     * @param spoilers Whether the results include reviews with spoilers or not. Defaults to true. (optional)
     * @return RequestConfig
     */
    fun getTopReviewsRequestConfig(page: kotlin.Int?, type: TopReviewsTypeEnum?, preliminary: kotlin.Boolean?, spoilers: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (preliminary != null) {
                    put("preliminary", listOf(preliminary.toString()))
                }
                if (spoilers != null) {
                    put("spoilers", listOf(spoilers.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/top/reviews",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
