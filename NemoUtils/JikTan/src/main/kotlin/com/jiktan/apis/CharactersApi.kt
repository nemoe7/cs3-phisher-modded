/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.jiktan.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.jiktan.models.CharacterAnime
import com.jiktan.models.CharacterManga
import com.jiktan.models.CharacterPictures
import com.jiktan.models.CharacterVoiceActors
import com.jiktan.models.CharactersSearch
import com.jiktan.models.CharactersSearchQueryOrderby
import com.jiktan.models.GetCharacterById200Response
import com.jiktan.models.GetCharacterFullById200Response
import com.jiktan.models.SearchQuerySort

import com.fasterxml.jackson.annotation.JsonProperty

import com.jiktan.infrastructure.ApiClient
import com.jiktan.infrastructure.ApiResponse
import com.jiktan.infrastructure.ClientException
import com.jiktan.infrastructure.ClientError
import com.jiktan.infrastructure.ServerException
import com.jiktan.infrastructure.ServerError
import com.jiktan.infrastructure.MultiValueMap
import com.jiktan.infrastructure.PartConfig
import com.jiktan.infrastructure.RequestConfig
import com.jiktan.infrastructure.RequestMethod
import com.jiktan.infrastructure.ResponseType
import com.jiktan.infrastructure.Success
import com.jiktan.infrastructure.toMultiValue

class CharactersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.jikan.moe/v4")
        }
    }

    /**
     * GET /characters/{id}/anime
     *
     *
     * @param id
     * @return CharacterAnime
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharacterAnime(id: kotlin.Int) : CharacterAnime {
        val localVarResponse = getCharacterAnimeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharacterAnime
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /characters/{id}/anime
     *
     *
     * @param id
     * @return ApiResponse<CharacterAnime?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCharacterAnimeWithHttpInfo(id: kotlin.Int) : ApiResponse<CharacterAnime?> {
        val localVariableConfig = getCharacterAnimeRequestConfig(id = id)

        return request<Unit, CharacterAnime>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharacterAnime
     *
     * @param id
     * @return RequestConfig
     */
    fun getCharacterAnimeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters/{id}/anime".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /characters/{id}
     *
     *
     * @param id
     * @return GetCharacterById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharacterById(id: kotlin.Int) : GetCharacterById200Response {
        val localVarResponse = getCharacterByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCharacterById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /characters/{id}
     *
     *
     * @param id
     * @return ApiResponse<GetCharacterById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCharacterByIdWithHttpInfo(id: kotlin.Int) : ApiResponse<GetCharacterById200Response?> {
        val localVariableConfig = getCharacterByIdRequestConfig(id = id)

        return request<Unit, GetCharacterById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharacterById
     *
     * @param id
     * @return RequestConfig
     */
    fun getCharacterByIdRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /characters/{id}/full
     *
     *
     * @param id
     * @return GetCharacterFullById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharacterFullById(id: kotlin.Int) : GetCharacterFullById200Response {
        val localVarResponse = getCharacterFullByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetCharacterFullById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /characters/{id}/full
     *
     *
     * @param id
     * @return ApiResponse<GetCharacterFullById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCharacterFullByIdWithHttpInfo(id: kotlin.Int) : ApiResponse<GetCharacterFullById200Response?> {
        val localVariableConfig = getCharacterFullByIdRequestConfig(id = id)

        return request<Unit, GetCharacterFullById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharacterFullById
     *
     * @param id
     * @return RequestConfig
     */
    fun getCharacterFullByIdRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters/{id}/full".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /characters/{id}/manga
     *
     *
     * @param id
     * @return CharacterManga
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharacterManga(id: kotlin.Int) : CharacterManga {
        val localVarResponse = getCharacterMangaWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharacterManga
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /characters/{id}/manga
     *
     *
     * @param id
     * @return ApiResponse<CharacterManga?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCharacterMangaWithHttpInfo(id: kotlin.Int) : ApiResponse<CharacterManga?> {
        val localVariableConfig = getCharacterMangaRequestConfig(id = id)

        return request<Unit, CharacterManga>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharacterManga
     *
     * @param id
     * @return RequestConfig
     */
    fun getCharacterMangaRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters/{id}/manga".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /characters/{id}/pictures
     *
     *
     * @param id
     * @return CharacterPictures
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharacterPictures(id: kotlin.Int) : CharacterPictures {
        val localVarResponse = getCharacterPicturesWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharacterPictures
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /characters/{id}/pictures
     *
     *
     * @param id
     * @return ApiResponse<CharacterPictures?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCharacterPicturesWithHttpInfo(id: kotlin.Int) : ApiResponse<CharacterPictures?> {
        val localVariableConfig = getCharacterPicturesRequestConfig(id = id)

        return request<Unit, CharacterPictures>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharacterPictures
     *
     * @param id
     * @return RequestConfig
     */
    fun getCharacterPicturesRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters/{id}/pictures".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /characters/{id}/voices
     *
     *
     * @param id
     * @return CharacterVoiceActors
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharacterVoiceActors(id: kotlin.Int) : CharacterVoiceActors {
        val localVarResponse = getCharacterVoiceActorsWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharacterVoiceActors
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /characters/{id}/voices
     *
     *
     * @param id
     * @return ApiResponse<CharacterVoiceActors?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCharacterVoiceActorsWithHttpInfo(id: kotlin.Int) : ApiResponse<CharacterVoiceActors?> {
        val localVariableConfig = getCharacterVoiceActorsRequestConfig(id = id)

        return request<Unit, CharacterVoiceActors>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharacterVoiceActors
     *
     * @param id
     * @return RequestConfig
     */
    fun getCharacterVoiceActorsRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters/{id}/voices".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /characters
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param letter Return entries starting with the given letter (optional)
     * @return CharactersSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharactersSearch(page: kotlin.Int? = null, limit: kotlin.Int? = null, q: kotlin.String? = null, orderBy: CharactersSearchQueryOrderby? = null, sort: SearchQuerySort? = null, letter: kotlin.String? = null) : CharactersSearch {
        val localVarResponse = getCharactersSearchWithHttpInfo(page = page, limit = limit, q = q, orderBy = orderBy, sort = sort, letter = letter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CharactersSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /characters
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param letter Return entries starting with the given letter (optional)
     * @return ApiResponse<CharactersSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCharactersSearchWithHttpInfo(page: kotlin.Int?, limit: kotlin.Int?, q: kotlin.String?, orderBy: CharactersSearchQueryOrderby?, sort: SearchQuerySort?, letter: kotlin.String?) : ApiResponse<CharactersSearch?> {
        val localVariableConfig = getCharactersSearchRequestConfig(page = page, limit = limit, q = q, orderBy = orderBy, sort = sort, letter = letter)

        return request<Unit, CharactersSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharactersSearch
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param letter Return entries starting with the given letter (optional)
     * @return RequestConfig
     */
    fun getCharactersSearchRequestConfig(page: kotlin.Int?, limit: kotlin.Int?, q: kotlin.String?, orderBy: CharactersSearchQueryOrderby?, sort: SearchQuerySort?, letter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (orderBy != null) {
                    put("order_by", listOf(orderBy.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (letter != null) {
                    put("letter", listOf(letter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/characters",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
