/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.jiktan.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.jiktan.models.ClubRelations
import com.jiktan.models.ClubSearchQueryCategory
import com.jiktan.models.ClubSearchQueryOrderby
import com.jiktan.models.ClubSearchQueryType
import com.jiktan.models.ClubStaff
import com.jiktan.models.ClubsSearch
import com.jiktan.models.GetClubMembers200Response
import com.jiktan.models.GetClubsById200Response
import com.jiktan.models.SearchQuerySort

import com.fasterxml.jackson.annotation.JsonProperty

import com.jiktan.infrastructure.ApiClient
import com.jiktan.infrastructure.ApiResponse
import com.jiktan.infrastructure.ClientException
import com.jiktan.infrastructure.ClientError
import com.jiktan.infrastructure.ServerException
import com.jiktan.infrastructure.ServerError
import com.jiktan.infrastructure.MultiValueMap
import com.jiktan.infrastructure.PartConfig
import com.jiktan.infrastructure.RequestConfig
import com.jiktan.infrastructure.RequestMethod
import com.jiktan.infrastructure.ResponseType
import com.jiktan.infrastructure.Success
import com.jiktan.infrastructure.toMultiValue

class ClubsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.jikan.moe/v4")
        }
    }

    /**
     * GET /clubs/{id}/members
     *
     *
     * @param id
     * @param page  (optional)
     * @return GetClubMembers200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getClubMembers(id: kotlin.Int, page: kotlin.Int? = null) : GetClubMembers200Response {
        val localVarResponse = getClubMembersWithHttpInfo(id = id, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetClubMembers200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /clubs/{id}/members
     *
     *
     * @param id
     * @param page  (optional)
     * @return ApiResponse<GetClubMembers200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getClubMembersWithHttpInfo(id: kotlin.Int, page: kotlin.Int?) : ApiResponse<GetClubMembers200Response?> {
        val localVariableConfig = getClubMembersRequestConfig(id = id, page = page)

        return request<Unit, GetClubMembers200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getClubMembers
     *
     * @param id
     * @param page  (optional)
     * @return RequestConfig
     */
    fun getClubMembersRequestConfig(id: kotlin.Int, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clubs/{id}/members".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /clubs/{id}/relations
     *
     *
     * @param id
     * @return ClubRelations
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getClubRelations(id: kotlin.Int) : ClubRelations {
        val localVarResponse = getClubRelationsWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClubRelations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /clubs/{id}/relations
     *
     *
     * @param id
     * @return ApiResponse<ClubRelations?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getClubRelationsWithHttpInfo(id: kotlin.Int) : ApiResponse<ClubRelations?> {
        val localVariableConfig = getClubRelationsRequestConfig(id = id)

        return request<Unit, ClubRelations>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getClubRelations
     *
     * @param id
     * @return RequestConfig
     */
    fun getClubRelationsRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clubs/{id}/relations".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /clubs/{id}/staff
     *
     *
     * @param id
     * @return ClubStaff
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getClubStaff(id: kotlin.Int) : ClubStaff {
        val localVarResponse = getClubStaffWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClubStaff
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /clubs/{id}/staff
     *
     *
     * @param id
     * @return ApiResponse<ClubStaff?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getClubStaffWithHttpInfo(id: kotlin.Int) : ApiResponse<ClubStaff?> {
        val localVariableConfig = getClubStaffRequestConfig(id = id)

        return request<Unit, ClubStaff>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getClubStaff
     *
     * @param id
     * @return RequestConfig
     */
    fun getClubStaffRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clubs/{id}/staff".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /clubs/{id}
     *
     *
     * @param id
     * @return GetClubsById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getClubsById(id: kotlin.Int) : GetClubsById200Response {
        val localVarResponse = getClubsByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetClubsById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /clubs/{id}
     *
     *
     * @param id
     * @return ApiResponse<GetClubsById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getClubsByIdWithHttpInfo(id: kotlin.Int) : ApiResponse<GetClubsById200Response?> {
        val localVariableConfig = getClubsByIdRequestConfig(id = id)

        return request<Unit, GetClubsById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getClubsById
     *
     * @param id
     * @return RequestConfig
     */
    fun getClubsByIdRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clubs/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /clubs
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param category  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param letter Return entries starting with the given letter (optional)
     * @return ClubsSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getClubsSearch(page: kotlin.Int? = null, limit: kotlin.Int? = null, q: kotlin.String? = null, type: ClubSearchQueryType? = null, category: ClubSearchQueryCategory? = null, orderBy: ClubSearchQueryOrderby? = null, sort: SearchQuerySort? = null, letter: kotlin.String? = null) : ClubsSearch {
        val localVarResponse = getClubsSearchWithHttpInfo(page = page, limit = limit, q = q, type = type, category = category, orderBy = orderBy, sort = sort, letter = letter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClubsSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /clubs
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param category  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param letter Return entries starting with the given letter (optional)
     * @return ApiResponse<ClubsSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getClubsSearchWithHttpInfo(page: kotlin.Int?, limit: kotlin.Int?, q: kotlin.String?, type: ClubSearchQueryType?, category: ClubSearchQueryCategory?, orderBy: ClubSearchQueryOrderby?, sort: SearchQuerySort?, letter: kotlin.String?) : ApiResponse<ClubsSearch?> {
        val localVariableConfig = getClubsSearchRequestConfig(page = page, limit = limit, q = q, type = type, category = category, orderBy = orderBy, sort = sort, letter = letter)

        return request<Unit, ClubsSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getClubsSearch
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param category  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param letter Return entries starting with the given letter (optional)
     * @return RequestConfig
     */
    fun getClubsSearchRequestConfig(page: kotlin.Int?, limit: kotlin.Int?, q: kotlin.String?, type: ClubSearchQueryType?, category: ClubSearchQueryCategory?, orderBy: ClubSearchQueryOrderby?, sort: SearchQuerySort?, letter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (category != null) {
                    put("category", listOf(category.toString()))
                }
                if (orderBy != null) {
                    put("order_by", listOf(orderBy.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (letter != null) {
                    put("letter", listOf(letter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clubs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
