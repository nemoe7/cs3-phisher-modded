/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.jiktan.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.jiktan.models.ExternalLinks
import com.jiktan.models.GetRandomUsers200Response
import com.jiktan.models.GetTopReviews200Response
import com.jiktan.models.GetUserById200Response
import com.jiktan.models.GetUserFavorites200Response
import com.jiktan.models.GetUserFullProfile200Response
import com.jiktan.models.Recommendations
import com.jiktan.models.UserAbout
import com.jiktan.models.UserAnimeListStatusFilter
import com.jiktan.models.UserClubs
import com.jiktan.models.UserFriends
import com.jiktan.models.UserHistory
import com.jiktan.models.UserMangaListStatusFilter
import com.jiktan.models.UserStatistics
import com.jiktan.models.UserUpdates
import com.jiktan.models.UsersSearch
import com.jiktan.models.UsersSearchQueryGender

import com.fasterxml.jackson.annotation.JsonProperty

import com.jiktan.infrastructure.ApiClient
import com.jiktan.infrastructure.ApiResponse
import com.jiktan.infrastructure.ClientException
import com.jiktan.infrastructure.ClientError
import com.jiktan.infrastructure.ServerException
import com.jiktan.infrastructure.ServerError
import com.jiktan.infrastructure.MultiValueMap
import com.jiktan.infrastructure.PartConfig
import com.jiktan.infrastructure.RequestConfig
import com.jiktan.infrastructure.RequestMethod
import com.jiktan.infrastructure.ResponseType
import com.jiktan.infrastructure.Success
import com.jiktan.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.jikan.moe/v4")
        }
    }

    /**
     * GET /users/{username}/about
     *
     *
     * @param username
     * @return UserAbout
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserAbout(username: kotlin.String) : UserAbout {
        val localVarResponse = getUserAboutWithHttpInfo(username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserAbout
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/about
     *
     *
     * @param username
     * @return ApiResponse<UserAbout?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserAboutWithHttpInfo(username: kotlin.String) : ApiResponse<UserAbout?> {
        val localVariableConfig = getUserAboutRequestConfig(username = username)

        return request<Unit, UserAbout>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserAbout
     *
     * @param username
     * @return RequestConfig
     */
    fun getUserAboutRequestConfig(username: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/about".replace("{"+"username"+"}", encodeURIComponent(username)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/animelist
     *
     * User Anime lists have been discontinued since May 1st, 2022. &lt;a href&#x3D;&#39;https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A&#39;&gt;Read more&lt;/a&gt;
     * @param username
     * @param status  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserAnimelist(username: kotlin.String, status: UserAnimeListStatusFilter? = null) : kotlin.Any {
        @Suppress("DEPRECATION")
        val localVarResponse = getUserAnimelistWithHttpInfo(username = username, status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/animelist
     *
     * User Anime lists have been discontinued since May 1st, 2022. &lt;a href&#x3D;&#39;https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A&#39;&gt;Read more&lt;/a&gt;
     * @param username
     * @param status  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserAnimelistWithHttpInfo(username: kotlin.String, status: UserAnimeListStatusFilter?) : ApiResponse<kotlin.Any?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getUserAnimelistRequestConfig(username = username, status = status)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserAnimelist
     *
     * @param username
     * @param status  (optional)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getUserAnimelistRequestConfig(username: kotlin.String, status: UserAnimeListStatusFilter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/animelist".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/userbyid/{id}
     *
     *
     * @param id
     * @return GetUserById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserById(id: kotlin.Int) : GetUserById200Response {
        val localVarResponse = getUserByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/userbyid/{id}
     *
     *
     * @param id
     * @return ApiResponse<GetUserById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserByIdWithHttpInfo(id: kotlin.Int) : ApiResponse<GetUserById200Response?> {
        val localVariableConfig = getUserByIdRequestConfig(id = id)

        return request<Unit, GetUserById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserById
     *
     * @param id
     * @return RequestConfig
     */
    fun getUserByIdRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/userbyid/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/clubs
     *
     *
     * @param username
     * @param page  (optional)
     * @return UserClubs
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserClubs(username: kotlin.String, page: kotlin.Int? = null) : UserClubs {
        val localVarResponse = getUserClubsWithHttpInfo(username = username, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserClubs
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/clubs
     *
     *
     * @param username
     * @param page  (optional)
     * @return ApiResponse<UserClubs?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserClubsWithHttpInfo(username: kotlin.String, page: kotlin.Int?) : ApiResponse<UserClubs?> {
        val localVariableConfig = getUserClubsRequestConfig(username = username, page = page)

        return request<Unit, UserClubs>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserClubs
     *
     * @param username
     * @param page  (optional)
     * @return RequestConfig
     */
    fun getUserClubsRequestConfig(username: kotlin.String, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/clubs".replace("{"+"username"+"}", encodeURIComponent(username)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/external
     *
     *
     * @param username
     * @return ExternalLinks
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserExternal(username: kotlin.String) : ExternalLinks {
        val localVarResponse = getUserExternalWithHttpInfo(username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExternalLinks
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/external
     *
     *
     * @param username
     * @return ApiResponse<ExternalLinks?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserExternalWithHttpInfo(username: kotlin.String) : ApiResponse<ExternalLinks?> {
        val localVariableConfig = getUserExternalRequestConfig(username = username)

        return request<Unit, ExternalLinks>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserExternal
     *
     * @param username
     * @return RequestConfig
     */
    fun getUserExternalRequestConfig(username: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/external".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/favorites
     *
     *
     * @param username
     * @return GetUserFavorites200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserFavorites(username: kotlin.String) : GetUserFavorites200Response {
        val localVarResponse = getUserFavoritesWithHttpInfo(username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserFavorites200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/favorites
     *
     *
     * @param username
     * @return ApiResponse<GetUserFavorites200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserFavoritesWithHttpInfo(username: kotlin.String) : ApiResponse<GetUserFavorites200Response?> {
        val localVariableConfig = getUserFavoritesRequestConfig(username = username)

        return request<Unit, GetUserFavorites200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserFavorites
     *
     * @param username
     * @return RequestConfig
     */
    fun getUserFavoritesRequestConfig(username: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/favorites".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/friends
     *
     *
     * @param username
     * @param page  (optional)
     * @return UserFriends
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserFriends(username: kotlin.String, page: kotlin.Int? = null) : UserFriends {
        val localVarResponse = getUserFriendsWithHttpInfo(username = username, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserFriends
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/friends
     *
     *
     * @param username
     * @param page  (optional)
     * @return ApiResponse<UserFriends?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserFriendsWithHttpInfo(username: kotlin.String, page: kotlin.Int?) : ApiResponse<UserFriends?> {
        val localVariableConfig = getUserFriendsRequestConfig(username = username, page = page)

        return request<Unit, UserFriends>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserFriends
     *
     * @param username
     * @param page  (optional)
     * @return RequestConfig
     */
    fun getUserFriendsRequestConfig(username: kotlin.String, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/friends".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/full
     *
     *
     * @param username
     * @return GetUserFullProfile200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserFullProfile(username: kotlin.String) : GetUserFullProfile200Response {
        val localVarResponse = getUserFullProfileWithHttpInfo(username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserFullProfile200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/full
     *
     *
     * @param username
     * @return ApiResponse<GetUserFullProfile200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserFullProfileWithHttpInfo(username: kotlin.String) : ApiResponse<GetUserFullProfile200Response?> {
        val localVariableConfig = getUserFullProfileRequestConfig(username = username)

        return request<Unit, GetUserFullProfile200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserFullProfile
     *
     * @param username
     * @return RequestConfig
     */
    fun getUserFullProfileRequestConfig(username: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/full".replace("{"+"username"+"}", encodeURIComponent(username)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
     enum class TypeGetUserHistory(val value: kotlin.String) {
         @JsonProperty(value = "anime") ANIME("anime"),
         @JsonProperty(value = "manga") MANGA("manga");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = value
     }

    /**
     * GET /users/{username}/history
     *
     *
     * @param username
     * @param type  (optional)
     * @return UserHistory
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserHistory(username: kotlin.String, type: TypeGetUserHistory? = null) : UserHistory {
        val localVarResponse = getUserHistoryWithHttpInfo(username = username, type = type)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserHistory
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/history
     *
     *
     * @param username
     * @param type  (optional)
     * @return ApiResponse<UserHistory?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserHistoryWithHttpInfo(username: kotlin.String, type: TypeGetUserHistory?) : ApiResponse<UserHistory?> {
        val localVariableConfig = getUserHistoryRequestConfig(username = username, type = type)

        return request<Unit, UserHistory>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserHistory
     *
     * @param username
     * @param type  (optional)
     * @return RequestConfig
     */
    fun getUserHistoryRequestConfig(username: kotlin.String, type: TypeGetUserHistory?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (type != null) {
                    put("type", listOf(type.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/history".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/mangalist
     *
     * User Manga lists have been discontinued since May 1st, 2022. &lt;a href&#x3D;&#39;https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A&#39;&gt;Read more&lt;/a&gt;
     * @param username
     * @param status  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserMangaList(username: kotlin.String, status: UserMangaListStatusFilter? = null) : kotlin.Any {
        @Suppress("DEPRECATION")
        val localVarResponse = getUserMangaListWithHttpInfo(username = username, status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/mangalist
     *
     * User Manga lists have been discontinued since May 1st, 2022. &lt;a href&#x3D;&#39;https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A&#39;&gt;Read more&lt;/a&gt;
     * @param username
     * @param status  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserMangaListWithHttpInfo(username: kotlin.String, status: UserMangaListStatusFilter?) : ApiResponse<kotlin.Any?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getUserMangaListRequestConfig(username = username, status = status)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserMangaList
     *
     * @param username
     * @param status  (optional)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getUserMangaListRequestConfig(username: kotlin.String, status: UserMangaListStatusFilter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/mangalist".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}
     *
     *
     * @param username
     * @return GetRandomUsers200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserProfile(username: kotlin.String) : GetRandomUsers200Response {
        val localVarResponse = getUserProfileWithHttpInfo(username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRandomUsers200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}
     *
     *
     * @param username
     * @return ApiResponse<GetRandomUsers200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserProfileWithHttpInfo(username: kotlin.String) : ApiResponse<GetRandomUsers200Response?> {
        val localVariableConfig = getUserProfileRequestConfig(username = username)

        return request<Unit, GetRandomUsers200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserProfile
     *
     * @param username
     * @return RequestConfig
     */
    fun getUserProfileRequestConfig(username: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}".replace("{"+"username"+"}", encodeURIComponent(username)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/recommendations
     *
     *
     * @param username
     * @param page  (optional)
     * @return Recommendations
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserRecommendations(username: kotlin.String, page: kotlin.Int? = null) : Recommendations {
        val localVarResponse = getUserRecommendationsWithHttpInfo(username = username, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Recommendations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/recommendations
     *
     *
     * @param username
     * @param page  (optional)
     * @return ApiResponse<Recommendations?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserRecommendationsWithHttpInfo(username: kotlin.String, page: kotlin.Int?) : ApiResponse<Recommendations?> {
        val localVariableConfig = getUserRecommendationsRequestConfig(username = username, page = page)

        return request<Unit, Recommendations>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserRecommendations
     *
     * @param username
     * @param page  (optional)
     * @return RequestConfig
     */
    fun getUserRecommendationsRequestConfig(username: kotlin.String, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/recommendations".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/reviews
     *
     *
     * @param username
     * @param page  (optional)
     * @return GetTopReviews200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserReviews(username: kotlin.String, page: kotlin.Int? = null) : GetTopReviews200Response {
        val localVarResponse = getUserReviewsWithHttpInfo(username = username, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTopReviews200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/reviews
     *
     *
     * @param username
     * @param page  (optional)
     * @return ApiResponse<GetTopReviews200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserReviewsWithHttpInfo(username: kotlin.String, page: kotlin.Int?) : ApiResponse<GetTopReviews200Response?> {
        val localVariableConfig = getUserReviewsRequestConfig(username = username, page = page)

        return request<Unit, GetTopReviews200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserReviews
     *
     * @param username
     * @param page  (optional)
     * @return RequestConfig
     */
    fun getUserReviewsRequestConfig(username: kotlin.String, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/reviews".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/statistics
     *
     *
     * @param username
     * @return UserStatistics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserStatistics(username: kotlin.String) : UserStatistics {
        val localVarResponse = getUserStatisticsWithHttpInfo(username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserStatistics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/statistics
     *
     *
     * @param username
     * @return ApiResponse<UserStatistics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserStatisticsWithHttpInfo(username: kotlin.String) : ApiResponse<UserStatistics?> {
        val localVariableConfig = getUserStatisticsRequestConfig(username = username)

        return request<Unit, UserStatistics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserStatistics
     *
     * @param username
     * @return RequestConfig
     */
    fun getUserStatisticsRequestConfig(username: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/statistics".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{username}/userupdates
     *
     *
     * @param username
     * @return UserUpdates
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserUpdates(username: kotlin.String) : UserUpdates {
        val localVarResponse = getUserUpdatesWithHttpInfo(username = username)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserUpdates
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{username}/userupdates
     *
     *
     * @param username
     * @return ApiResponse<UserUpdates?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserUpdatesWithHttpInfo(username: kotlin.String) : ApiResponse<UserUpdates?> {
        val localVariableConfig = getUserUpdatesRequestConfig(username = username)

        return request<Unit, UserUpdates>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserUpdates
     *
     * @param username
     * @return RequestConfig
     */
    fun getUserUpdatesRequestConfig(username: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{username}/userupdates".replace("{"+"username"+"}", encodeURIComponent(
                username
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param gender  (optional)
     * @param location  (optional)
     * @param maxAge  (optional)
     * @param minAge  (optional)
     * @return UsersSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUsersSearch(page: kotlin.Int? = null, limit: kotlin.Int? = null, q: kotlin.String? = null, gender: UsersSearchQueryGender? = null, location: kotlin.String? = null, maxAge: kotlin.Int? = null, minAge: kotlin.Int? = null) : UsersSearch {
        val localVarResponse = getUsersSearchWithHttpInfo(page = page, limit = limit, q = q, gender = gender, location = location, maxAge = maxAge, minAge = minAge)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users
     *
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param gender  (optional)
     * @param location  (optional)
     * @param maxAge  (optional)
     * @param minAge  (optional)
     * @return ApiResponse<UsersSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getUsersSearchWithHttpInfo(page: kotlin.Int?, limit: kotlin.Int?, q: kotlin.String?, gender: UsersSearchQueryGender?, location: kotlin.String?, maxAge: kotlin.Int?, minAge: kotlin.Int?) : ApiResponse<UsersSearch?> {
        val localVariableConfig = getUsersSearchRequestConfig(page = page, limit = limit, q = q, gender = gender, location = location, maxAge = maxAge, minAge = minAge)

        return request<Unit, UsersSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUsersSearch
     *
     * @param page  (optional)
     * @param limit  (optional)
     * @param q  (optional)
     * @param gender  (optional)
     * @param location  (optional)
     * @param maxAge  (optional)
     * @param minAge  (optional)
     * @return RequestConfig
     */
    fun getUsersSearchRequestConfig(page: kotlin.Int?, limit: kotlin.Int?, q: kotlin.String?, gender: UsersSearchQueryGender?, location: kotlin.String?, maxAge: kotlin.Int?, minAge: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (gender != null) {
                    put("gender", listOf(gender.toString()))
                }
                if (location != null) {
                    put("location", listOf(location.toString()))
                }
                if (maxAge != null) {
                    put("maxAge", listOf(maxAge.toString()))
                }
                if (minAge != null) {
                    put("minAge", listOf(minAge.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
