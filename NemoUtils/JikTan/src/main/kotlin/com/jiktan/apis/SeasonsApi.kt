/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.jiktan.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.jiktan.models.AnimeSearch
import com.jiktan.models.Seasons

import com.fasterxml.jackson.annotation.JsonProperty

import com.jiktan.infrastructure.ApiClient
import com.jiktan.infrastructure.ApiResponse
import com.jiktan.infrastructure.ClientException
import com.jiktan.infrastructure.ClientError
import com.jiktan.infrastructure.ServerException
import com.jiktan.infrastructure.ServerError
import com.jiktan.infrastructure.MultiValueMap
import com.jiktan.infrastructure.PartConfig
import com.jiktan.infrastructure.RequestConfig
import com.jiktan.infrastructure.RequestMethod
import com.jiktan.infrastructure.ResponseType
import com.jiktan.infrastructure.Success
import com.jiktan.infrastructure.toMultiValue

class SeasonsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.jikan.moe/v4")
        }
    }

    /**
     * enum for parameter filter
     */
     enum class FilterGetSeason(val value: kotlin.String) {
         @JsonProperty(value = "tv") TV("tv"),
         @JsonProperty(value = "movie") MOVIE("movie"),
         @JsonProperty(value = "ova") OVA("ova"),
         @JsonProperty(value = "special") SPECIAL("special"),
         @JsonProperty(value = "ona") ONA("ona"),
         @JsonProperty(value = "music") MUSIC("music");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = value
     }

    /**
     * GET /seasons/{year}/{season}
     *
     *
     * @param year
     * @param season
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return AnimeSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSeason(year: kotlin.Int, season: kotlin.String, filter: FilterGetSeason? = null, sfw: kotlin.Boolean? = null, unapproved: kotlin.Boolean? = null, continuing: kotlin.Boolean? = null, page: kotlin.Int? = null, limit: kotlin.Int? = null) : AnimeSearch {
        val localVarResponse = getSeasonWithHttpInfo(year = year, season = season, filter = filter, sfw = sfw, unapproved = unapproved, continuing = continuing, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AnimeSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /seasons/{year}/{season}
     *
     *
     * @param year
     * @param season
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<AnimeSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSeasonWithHttpInfo(year: kotlin.Int, season: kotlin.String, filter: FilterGetSeason?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, continuing: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<AnimeSearch?> {
        val localVariableConfig = getSeasonRequestConfig(year = year, season = season, filter = filter, sfw = sfw, unapproved = unapproved, continuing = continuing, page = page, limit = limit)

        return request<Unit, AnimeSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSeason
     *
     * @param year
     * @param season
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getSeasonRequestConfig(year: kotlin.Int, season: kotlin.String, filter: FilterGetSeason?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, continuing: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.value))
                }
                if (sfw != null) {
                    put("sfw", listOf(sfw.toString()))
                }
                if (unapproved != null) {
                    put("unapproved", listOf(unapproved.toString()))
                }
                if (continuing != null) {
                    put("continuing", listOf(continuing.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/seasons/{year}/{season}".replace("{"+"year"+"}", encodeURIComponent(year.toString())).replace("{"+"season"+"}", encodeURIComponent(
                season
            )),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter filter
     */
     enum class FilterGetSeasonNow(val value: kotlin.String) {
         @JsonProperty(value = "tv") TV("tv"),
         @JsonProperty(value = "movie") MOVIE("movie"),
         @JsonProperty(value = "ova") OVA("ova"),
         @JsonProperty(value = "special") SPECIAL("special"),
         @JsonProperty(value = "ona") ONA("ona"),
         @JsonProperty(value = "music") MUSIC("music");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = value
     }

    /**
     * GET /seasons/now
     *
     *
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return AnimeSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSeasonNow(filter: FilterGetSeasonNow? = null, sfw: kotlin.Boolean? = null, unapproved: kotlin.Boolean? = null, continuing: kotlin.Boolean? = null, page: kotlin.Int? = null, limit: kotlin.Int? = null) : AnimeSearch {
        val localVarResponse = getSeasonNowWithHttpInfo(filter = filter, sfw = sfw, unapproved = unapproved, continuing = continuing, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AnimeSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /seasons/now
     *
     *
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<AnimeSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSeasonNowWithHttpInfo(filter: FilterGetSeasonNow?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, continuing: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<AnimeSearch?> {
        val localVariableConfig = getSeasonNowRequestConfig(filter = filter, sfw = sfw, unapproved = unapproved, continuing = continuing, page = page, limit = limit)

        return request<Unit, AnimeSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSeasonNow
     *
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getSeasonNowRequestConfig(filter: FilterGetSeasonNow?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, continuing: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.value))
                }
                if (sfw != null) {
                    put("sfw", listOf(sfw.toString()))
                }
                if (unapproved != null) {
                    put("unapproved", listOf(unapproved.toString()))
                }
                if (continuing != null) {
                    put("continuing", listOf(continuing.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/seasons/now",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter filter
     */
     enum class FilterGetSeasonUpcoming(val value: kotlin.String) {
         @JsonProperty(value = "tv") TV("tv"),
         @JsonProperty(value = "movie") MOVIE("movie"),
         @JsonProperty(value = "ova") OVA("ova"),
         @JsonProperty(value = "special") SPECIAL("special"),
         @JsonProperty(value = "ona") ONA("ona"),
         @JsonProperty(value = "music") MUSIC("music");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = value
     }

    /**
     * GET /seasons/upcoming
     *
     *
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return AnimeSearch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSeasonUpcoming(filter: FilterGetSeasonUpcoming? = null, sfw: kotlin.Boolean? = null, unapproved: kotlin.Boolean? = null, continuing: kotlin.Boolean? = null, page: kotlin.Int? = null, limit: kotlin.Int? = null) : AnimeSearch {
        val localVarResponse = getSeasonUpcomingWithHttpInfo(filter = filter, sfw = sfw, unapproved = unapproved, continuing = continuing, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AnimeSearch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /seasons/upcoming
     *
     *
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<AnimeSearch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSeasonUpcomingWithHttpInfo(filter: FilterGetSeasonUpcoming?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, continuing: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<AnimeSearch?> {
        val localVariableConfig = getSeasonUpcomingRequestConfig(filter = filter, sfw = sfw, unapproved = unapproved, continuing = continuing, page = page, limit = limit)

        return request<Unit, AnimeSearch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSeasonUpcoming
     *
     * @param filter Entry types (optional)
     * @param sfw &#39;Safe For Work&#39;. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: &#x60;?sfw&#x60; (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param continuing This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &amp;#8243;TV (continuing)&amp;#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) &lt;br /&gt;Example usage: &#x60;?continuing&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getSeasonUpcomingRequestConfig(filter: FilterGetSeasonUpcoming?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, continuing: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.value))
                }
                if (sfw != null) {
                    put("sfw", listOf(sfw.toString()))
                }
                if (unapproved != null) {
                    put("unapproved", listOf(unapproved.toString()))
                }
                if (continuing != null) {
                    put("continuing", listOf(continuing.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/seasons/upcoming",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /seasons
     *
     *
     * @return Seasons
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSeasonsList() : Seasons {
        val localVarResponse = getSeasonsListWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Seasons
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /seasons
     *
     *
     * @return ApiResponse<Seasons?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSeasonsListWithHttpInfo() : ApiResponse<Seasons?> {
        val localVariableConfig = getSeasonsListRequestConfig()

        return request<Unit, Seasons>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSeasonsList
     *
     * @return RequestConfig
     */
    fun getSeasonsListRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/seasons",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
