/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.jiktan.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.jiktan.models.Schedules

import com.fasterxml.jackson.annotation.JsonProperty

import com.jiktan.infrastructure.ApiClient
import com.jiktan.infrastructure.ApiResponse
import com.jiktan.infrastructure.ClientException
import com.jiktan.infrastructure.ClientError
import com.jiktan.infrastructure.ServerException
import com.jiktan.infrastructure.ServerError
import com.jiktan.infrastructure.MultiValueMap
import com.jiktan.infrastructure.PartConfig
import com.jiktan.infrastructure.RequestConfig
import com.jiktan.infrastructure.RequestMethod
import com.jiktan.infrastructure.ResponseType
import com.jiktan.infrastructure.Success
import com.jiktan.infrastructure.toMultiValue

class SchedulesApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.jikan.moe/v4")
        }
    }

    /**
     * enum for parameter filter
     */
     enum class FilterGetSchedules(val value: kotlin.String) {
         @JsonProperty(value = "monday") MONDAY("monday"),
         @JsonProperty(value = "tuesday") TUESDAY("tuesday"),
         @JsonProperty(value = "wednesday") WEDNESDAY("wednesday"),
         @JsonProperty(value = "thursday") THURSDAY("thursday"),
         @JsonProperty(value = "friday") FRIDAY("friday"),
         @JsonProperty(value = "saturday") SATURDAY("saturday"),
         @JsonProperty(value = "sunday") SUNDAY("sunday"),
         @JsonProperty(value = "unknown") UNKNOWN("unknown"),
         @JsonProperty(value = "other") OTHER("other");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = value
     }

    /**
     * enum for parameter kids
     */
     enum class KidsGetSchedules(val value: kotlin.String) {
         @JsonProperty(value = "true") TRUE("true"),
         @JsonProperty(value = "false") FALSE("false");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = value
     }

    /**
     * enum for parameter sfw
     */
     enum class SfwGetSchedules(val value: kotlin.String) {
         @JsonProperty(value = "true") TRUE("true"),
         @JsonProperty(value = "false") FALSE("false");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = value
     }

    /**
     * GET /schedules
     *
     *
     * @param filter Filter by day (optional)
     * @param kids When supplied, it will filter entries with the &#x60;Kids&#x60; Genre Demographic. When supplied as &#x60;kids&#x3D;true&#x60;, it will return only Kid entries and when supplied as &#x60;kids&#x3D;false&#x60;, it will filter out any Kid entries. Defaults to &#x60;false&#x60;. (optional)
     * @param sfw &#39;Safe For Work&#39;. When supplied, it will filter entries with the &#x60;Hentai&#x60; Genre. When supplied as &#x60;sfw&#x3D;true&#x60;, it will return only SFW entries and when supplied as &#x60;sfw&#x3D;false&#x60;, it will filter out any Hentai entries. Defaults to &#x60;false&#x60;. (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return Schedules
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSchedules(filter: FilterGetSchedules? = null, kids: KidsGetSchedules? = null, sfw: SfwGetSchedules? = null, unapproved: kotlin.Boolean? = null, page: kotlin.Int? = null, limit: kotlin.Int? = null) : Schedules {
        val localVarResponse = getSchedulesWithHttpInfo(filter = filter, kids = kids, sfw = sfw, unapproved = unapproved, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Schedules
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /schedules
     *
     *
     * @param filter Filter by day (optional)
     * @param kids When supplied, it will filter entries with the &#x60;Kids&#x60; Genre Demographic. When supplied as &#x60;kids&#x3D;true&#x60;, it will return only Kid entries and when supplied as &#x60;kids&#x3D;false&#x60;, it will filter out any Kid entries. Defaults to &#x60;false&#x60;. (optional)
     * @param sfw &#39;Safe For Work&#39;. When supplied, it will filter entries with the &#x60;Hentai&#x60; Genre. When supplied as &#x60;sfw&#x3D;true&#x60;, it will return only SFW entries and when supplied as &#x60;sfw&#x3D;false&#x60;, it will filter out any Hentai entries. Defaults to &#x60;false&#x60;. (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<Schedules?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getSchedulesWithHttpInfo(filter: FilterGetSchedules?, kids: KidsGetSchedules?, sfw: SfwGetSchedules?, unapproved: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<Schedules?> {
        val localVariableConfig = getSchedulesRequestConfig(filter = filter, kids = kids, sfw = sfw, unapproved = unapproved, page = page, limit = limit)

        return request<Unit, Schedules>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSchedules
     *
     * @param filter Filter by day (optional)
     * @param kids When supplied, it will filter entries with the &#x60;Kids&#x60; Genre Demographic. When supplied as &#x60;kids&#x3D;true&#x60;, it will return only Kid entries and when supplied as &#x60;kids&#x3D;false&#x60;, it will filter out any Kid entries. Defaults to &#x60;false&#x60;. (optional)
     * @param sfw &#39;Safe For Work&#39;. When supplied, it will filter entries with the &#x60;Hentai&#x60; Genre. When supplied as &#x60;sfw&#x3D;true&#x60;, it will return only SFW entries and when supplied as &#x60;sfw&#x3D;false&#x60;, it will filter out any Hentai entries. Defaults to &#x60;false&#x60;. (optional)
     * @param unapproved This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: &#x60;?unapproved&#x60; (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getSchedulesRequestConfig(filter: FilterGetSchedules?, kids: KidsGetSchedules?, sfw: SfwGetSchedules?, unapproved: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.value))
                }
                if (kids != null) {
                    put("kids", listOf(kids.value))
                }
                if (sfw != null) {
                    put("sfw", listOf(sfw.value))
                }
                if (unapproved != null) {
                    put("unapproved", listOf(unapproved.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/schedules",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
